stat_ellipse(aes(fill = data[,shape]), level = elliLev, alpha = 0.2,
geom = "polygon", linetype = 2) +
scale_fill_discrete(name = "Class",
labels = c("class 1", "class 2")) +
scale_shape_discrete(name = "Class",
labels = c("class 1", "class 2"))
myPlot1
}
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Lab_Experiment",paste(file1_name,'.pdf', sep="")),bg="transparent")
myCCAPlot()
U1
ccaScores_old
myCCAPlot = function(x = U1, y = U2, col = V1, shape = type, data = ccaScores_old,
xyName = file1_name, coloName = file2_name,
textVjust = -1.0, elliLev = 0.6, ...){
jitterPara = list(...)
if(!"height" %in% names(jitterPara)){
jitterPara = c(jitterPara, height = 0.01)
} else if(!"width" %in% names(jitterPara)){
jitterPara = c(jitterPara, width = 0.01)
}
x = deparse(substitute(x))
y = deparse(substitute(y))
col = deparse(substitute(col))
shape = deparse(substitute(shape))
myPlot1 = ggplot(data, aes(x = data[,x], y = data[,y],
col = data[,col], shape = data[,shape])) +
geom_point(size = 4) +
scale_color_continuous(name = paste0("First Component \nScores of ",
coloName),
low = "blue", high = "red") +
geom_text(aes(label = rownames(data)),
col = "black", size = 5, vjust = textVjust,
position = do.call("position_jitter", args = jitterPara)) +
## The position_jitter will make the values within a group
## a litter bit separate.
## On ther other hand, position_dodge will separate the values between groups.
scale_x_continuous(paste0("First Component Scores of ",
xyName)) +
scale_y_continuous(paste0("Second Component Scores of ",
xyName)) +
labs(title = paste0("Sparse CCA Scores for ", xyName, " as Base")) +
theme(legend.title = element_text(size = 12),
plot.title = element_text(size = 16, vjust = 2.0, face = "bold"),
legend.text = element_text(size = 10)) +
stat_ellipse(aes(fill = data[,shape]), level = elliLev, alpha = 0.2,
geom = "polygon", linetype = 2) +
scale_fill_discrete(name = "Class",
labels = c("class 1", "class 2")) +
scale_shape_discrete(name = "Class",
labels = c("class 1", "class 2"))
myPlot1
}
myCCAPlot()
source('~/Desktop/Masters_Project/CCA/Lab_Experiment/framework_lab.R', echo=TRUE)
row[1,6]
rand
rand='%s'
sprintf("update ccajobs set status='Complete' where rand='%s'",row[1,5])
sprintf("update ccajobs set status='Complete' where rand='%s'",row[1,4])
sprintf("update ccajobs set status='Complete' where rand='%s'",row[1,6])
source('~/Desktop/Masters_Project/CCA/Lab_Experiment/framework_lab.R', echo=TRUE)
sprintf("update ccajobs set status='Complete' where id='%s'",row[1,6])
sprintf("update ccajobs set status='Complete' where id=%s",row[1,6])
source('~/Desktop/Masters_Project/CCA/Lab_Experiment/framework_lab.R', echo=TRUE)
source('~/Desktop/Masters_Project/CCA/Lab_Experiment/framework_lab.R', echo=TRUE)
J1 = read.table("Jennifer/cohen_colon-count.csv")
J1 = read.table("./Jennifer/cohen_colon-count.csv")
setwd("~/Desktop/Masters_Project/CCA/Lab_Experiment")
J1 = read.table("./Jennifer/cohen_colon-count.csv")
dim(J1)
J1[1:5,1]
J1 = read.csv("./Jennifer/cohen_colon-count.csv")
dim(J1)
J1 = read.csv("./Jennifer/cohen_colon-count.csv")
dim(J1)
j2 = read.csv("./Jennifer/Cohen-stool.txt-count.csv")
dim(j2)
j1[,1]
j1 = read.csv("./Jennifer/cohen_colon-count.csv")
j1[,1]
j1[,1:3]
j2[,1:3]
j2 = j2[-1,]
j2[,1:3]
j2 = read.csv("./Jennifer/Cohen-stool.txt-count.csv",header = T)
j2[,1:3]
j2 = j2[order(j2[,1]),]
j2[,1:3]
j1 = read.csv("./Jennifer/cohen_colon-count.csv")
j2 = read.csv("./Jennifer/Cohen-stool.txt-count.csv",header = T)
j2[,1:3]
j2 = j2[-1,]
j2[,1:3]
j1[,1:3]
c(j1[,1],j2[,1])
cbind(j1[,1],j2[,1])
j1[,1:3]
j1[,1]
j2[,1]
cbind(1, 1:7)
cbind(j1[,1],j2[,1])
dim(j2[,1])
j2[,1]
j2[,2]
j2[,1]
j1[,1]
j1[,1]
j1[,1:2]
j1[,2]
j2[,1]
j2[,1:2]
j2 = j2[order(j2[,1]),]
j2[,1:2]
j1 = j1[order(j1[,1]),]
j1[,1:2]
dim(j1)
j1[,1:18]
j1 = j1[1:18,]
j1[,1:2]
j2 = j2[j2[1]!="R_",]
j2[,1:2]
dim(j2)
dim(j1)
j1[,1:3]
j2[,1:3]
microb=j1
rnaseq=j2
dim(microb)
dim(rnaseq)
microb <- as.matrix(apply(microb,2,as.numeric))
type(rnaseq)
sd1 <- apply(microb,2,sd)
microb <- microb[,which(sd1 != 0)]  # choose only OTUs with non-zero standard deviation
dim(microb)
rnaseq <- as.matrix(apply(rnaseq,2,as.numeric))
sd2 <- apply(rnaseq,2,sd)
rnaseq <- rnaseq[,which(sd2 != 0)]
dim(rnaseq)
library(PMA)
set.seed(1105)
ccaPerm_old = CCA.permute(x = microb, z = rnaseq,
typex = "standard", typez = "standard",
nperms = 30, niter = 5, standardize = T)
penXtemp = ccaPerm_old$bestpenaltyx
penZtemp = ccaPerm_old$bestpenaltyz
ccaRslt_old = CCA(x = microb, z = rnaseq,
typex = "standard", typez = "standard",
penaltyx = penXtemp, penaltyz = penZtemp,
K = 2, niter = 5, standardize = T)
sum(ccaRslt_old$u != 0)
sum(ccaRslt_old$v != 0)
ccaScoreU_old = microb %*% ccaRslt_old$u
ccaScoreU_old
ccaScoreV_old = rnaseq %*% ccaRslt_old$v
ccaScores_old = cbind(ccaScoreU_old, ccaScoreV_old)
ccaScores_old
colnames(ccaScores_old) = c("U1", "U2", "V1", "V2")
ccaScores_old = as.data.frame(ccaScores_old)
len = dim(microb)[1]
ccaScores_old$type = c(rep("class 1", len/2), rep("class 2", len/2))
library(ggplot2)
myCCAPlot = function(x = U1, y = U2, col = V1, shape = type, data = ccaScores_old,
xyName = file1_name, coloName = file2_name,
textVjust = -1.0, elliLev = 0.6, ...){
jitterPara = list(...)
if(!"height" %in% names(jitterPara)){
jitterPara = c(jitterPara, height = 0.01)
} else if(!"width" %in% names(jitterPara)){
jitterPara = c(jitterPara, width = 0.01)
}
x = deparse(substitute(x))
y = deparse(substitute(y))
col = deparse(substitute(col))
shape = deparse(substitute(shape))
myPlot1 = ggplot(data, aes(x = data[,x], y = data[,y],
col = data[,col], shape = data[,shape])) +
geom_point(size = 4) +
scale_color_continuous(name = paste0("First Component \nScores of ",
coloName),
low = "blue", high = "red") +
geom_text(aes(label = rownames(data)),
col = "black", size = 5, vjust = textVjust,
position = do.call("position_jitter", args = jitterPara)) +
## The position_jitter will make the values within a group
## a litter bit separate.
## On ther other hand, position_dodge will separate the values between groups.
scale_x_continuous(paste0("First Component Scores of ",
xyName)) +
scale_y_continuous(paste0("Second Component Scores of ",
xyName)) +
labs(title = paste0("Sparse CCA Scores for ", xyName, " as Base")) +
theme(legend.title = element_text(size = 12),
plot.title = element_text(size = 16, vjust = 2.0, face = "bold"),
legend.text = element_text(size = 10)) +
stat_ellipse(aes(fill = data[,shape]), level = elliLev, alpha = 0.2,
geom = "polygon", linetype = 2) +
scale_fill_discrete(name = "Class",
labels = c("class 1", "class 2")) +
scale_shape_discrete(name = "Class",
labels = c("class 1", "class 2"))
myPlot1
}
myCCAPlot()
myCCAPlot()
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Lab_Experiment",paste(file1_name,'.pdf', sep="")),bg="transparent")
myCCAPlot()
ccaScores_old
myCCAPlot(V1, U2, U1, xyName = file2_name, coloName = file1_name)
myCCAPlot(V1, V2, U1, xyName = file2_name, coloName = file1_name)
myCCAPlot()
is.na(j1)
sum(is.na(j1))
sum(is.na(j2))
sum(is.na(j2[,]))
sum(is.na(j1[,]))
sum(is.na(micob[,]))
sum(is.na(microb[,]))
sum(is.na(rnaseq[,]))
dim(microb)
microb[1:3,1:3]
microb[1:3,1:3]==NA
microb[1:3,1:3]
rnaseq[1:3,1:3]
microb = j1[,1:1000]
microb[,1:3]
rnaseq = j2[,1:900]
sd1 <- apply(microb,2,sd)
microb <- microb[,which(sd1 != 0)]  # choose only OTUs with non-zero standard deviation
microb <- microb[,-1]
microb <- as.matrix(apply(microb,2,as.numeric))
sd1 <- apply(microb,2,sd)
microb <- microb[,which(sd1 != 0)]  # choose only OTUs with non-zero standard deviation
rnaseq <- rnaseq[,-1]
rnaseq <- as.matrix(apply(rnaseq,2,as.numeric))
sd2 <- apply(rnaseq,2,sd)
rnaseq <- rnaseq[,which(sd2 != 0)]
library(PMA)
set.seed(1105)
ccaPerm_old = CCA.permute(x = microb, z = rnaseq,
typex = "standard", typez = "standard",
nperms = 30, niter = 5, standardize = T)
penXtemp = ccaPerm_old$bestpenaltyx
penZtemp = ccaPerm_old$bestpenaltyz
ccaRslt_old = CCA(x = microb, z = rnaseq,
typex = "standard", typez = "standard",
penaltyx = penXtemp, penaltyz = penZtemp,
K = 2, niter = 5, standardize = T)
sum(ccaRslt_old$u != 0)
sum(ccaRslt_old$v != 0)
ccaScoreU_old = microb %*% ccaRslt_old$u
ccaScoreV_old = rnaseq %*% ccaRslt_old$v
ccaScores_old = cbind(ccaScoreU_old, ccaScoreV_old)
colnames(ccaScores_old) = c("U1", "U2", "V1", "V2")
ccaScores_old = as.data.frame(ccaScores_old)
len = dim(microb)[1]
ccaScores_old$type = c(rep("class 1", len/2), rep("class 2", len/2))
library(ggplot2)
myCCAPlot = function(x = U1, y = U2, col = V1, shape = type, data = ccaScores_old,
xyName = file1_name, coloName = file2_name,
textVjust = -1.0, elliLev = 0.6, ...){
jitterPara = list(...)
if(!"height" %in% names(jitterPara)){
jitterPara = c(jitterPara, height = 0.01)
} else if(!"width" %in% names(jitterPara)){
jitterPara = c(jitterPara, width = 0.01)
}
x = deparse(substitute(x))
y = deparse(substitute(y))
col = deparse(substitute(col))
shape = deparse(substitute(shape))
myPlot1 = ggplot(data, aes(x = data[,x], y = data[,y],
col = data[,col], shape = data[,shape])) +
geom_point(size = 4) +
scale_color_continuous(name = paste0("First Component \nScores of ",
coloName),
low = "blue", high = "red") +
geom_text(aes(label = rownames(data)),
col = "black", size = 5, vjust = textVjust,
position = do.call("position_jitter", args = jitterPara)) +
## The position_jitter will make the values within a group
## a litter bit separate.
## On ther other hand, position_dodge will separate the values between groups.
scale_x_continuous(paste0("First Component Scores of ",
xyName)) +
scale_y_continuous(paste0("Second Component Scores of ",
xyName)) +
labs(title = paste0("Sparse CCA Scores for ", xyName, " as Base")) +
theme(legend.title = element_text(size = 12),
plot.title = element_text(size = 16, vjust = 2.0, face = "bold"),
legend.text = element_text(size = 10)) +
stat_ellipse(aes(fill = data[,shape]), level = elliLev, alpha = 0.2,
geom = "polygon", linetype = 2) +
scale_fill_discrete(name = "Class",
labels = c("class 1", "class 2")) +
scale_shape_discrete(name = "Class",
labels = c("class 1", "class 2"))
myPlot1
}
myCCAPlot()
ccaScores_old
microb[,1:50]
myCCAPlot()
ccaScores_old$U1
ccaScores_old$U2
cov(ccaScores_old)
ccaScores_old
ccaScores_old[1,1]
ccaScores_old[1,1]+1
MASS::cov.trob(ccaScores_old)
myCCAPlot = function(x = U1, y = U2, col = V1, shape = type, data = ccaScores_old,
xyName = file1_name, coloName = file2_name,
textVjust = -1.0, elliLev = 0.6, ...){
jitterPara = list(...)
if(!"height" %in% names(jitterPara)){
jitterPara = c(jitterPara, height = 0.01)
} else if(!"width" %in% names(jitterPara)){
jitterPara = c(jitterPara, width = 0.01)
}
x = deparse(substitute(x))
y = deparse(substitute(y))
col = deparse(substitute(col))
shape = deparse(substitute(shape))
myPlot1 = ggplot(data, aes(x = data[,x], y = data[,y],
col = data[,col], shape = data[,shape])) +
geom_point(size = 4) +
scale_color_continuous(name = paste0("First Component \nScores of ",
coloName),
low = "blue", high = "red") +
geom_text(aes(label = rownames(data)),
col = "black", size = 5, vjust = textVjust,
position = do.call("position_jitter", args = jitterPara)) +
## The position_jitter will make the values within a group
## a litter bit separate.
## On ther other hand, position_dodge will separate the values between groups.
scale_x_continuous(paste0("First Component Scores of ",
xyName)) +
scale_y_continuous(paste0("Second Component Scores of ",
xyName)) +
labs(title = paste0("Sparse CCA Scores for ", xyName, " as Base")) +
theme(legend.title = element_text(size = 12),
plot.title = element_text(size = 16, vjust = 2.0, face = "bold"),
legend.text = element_text(size = 10)) +
#stat_ellipse(aes(fill = data[,shape]), level = elliLev, alpha = 0.2,
#geom = "polygon", linetype = 2) +
scale_fill_discrete(name = "Class",
labels = c("class 1", "class 2")) +
scale_shape_discrete(name = "Class",
labels = c("class 1", "class 2"))
myPlot1
}
myCCAPlot()
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Lab_Experiment",paste(file1_name,'.pdf', sep="")),bg="transparent")
myCCAPlot()
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Lab_Experiment",paste(file2_name,'.pdf', sep="")),bg="transparent")
myCCAPlot(V1, V2, U1, xyName = file2_name, coloName = file1_name)
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Lab_Experiment",paste(file2_name,'.pdf', sep="")),bg="transparent")
myCCAPlot(V1, V2, U1, xyName = file2_name, coloName = file1_name)
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Lab_Experiment",paste(file1_name,'.pdf', sep="")),bg="transparent")
myCCAPlot()
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Lab_Experiment",paste(file1_name,'.pdf', sep="")),bg="transparent")
myCCAPlot()
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Lab_Experiment",paste(file1_name,'.pdf', sep="")),bg="transparent")
myCCAPlot()
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Lab_Experiment",paste(file1_name,'.pdf', sep="")),bg="transparent")
myCCAPlot()
file1_name
file2_name
myCCAPlot()
library(ggplot2)
myCCAPlot = function(x = U1, y = U2, col = V1, shape = type, data = ccaScores_old,
xyName = file1_name, coloName = file2_name,
textVjust = -1.0, elliLev = 0.6, ...){
jitterPara = list(...)
if(!"height" %in% names(jitterPara)){
jitterPara = c(jitterPara, height = 0.01)
} else if(!"width" %in% names(jitterPara)){
jitterPara = c(jitterPara, width = 0.01)
}
x = deparse(substitute(x))
y = deparse(substitute(y))
col = deparse(substitute(col))
shape = deparse(substitute(shape))
myPlot1 = ggplot(data, aes(x = data[,x], y = data[,y],
col = data[,col], shape = data[,shape])) +
geom_point(size = 4) +
scale_color_continuous(name = paste0("First Component \nScores of ",
coloName),
low = "blue", high = "red") +
geom_text(aes(label = rownames(data)),
col = "black", size = 5, vjust = textVjust,
position = do.call("position_jitter", args = jitterPara)) +
## The position_jitter will make the values within a group
## a litter bit separate.
## On ther other hand, position_dodge will separate the values between groups.
scale_x_continuous(paste0("First Component Scores of ",
xyName)) +
scale_y_continuous(paste0("Second Component Scores of ",
xyName)) +
labs(title = paste0("Sparse CCA Scores for ", xyName, " as Base")) +
theme(legend.title = element_text(size = 12),
plot.title = element_text(size = 16, vjust = 2.0, face = "bold"),
legend.text = element_text(size = 10)) +
#stat_ellipse(aes(fill = data[,shape]), level = elliLev, alpha = 0.2,
#geom = "polygon", linetype = 2) +
scale_fill_discrete(name = "Class",
labels = c("class 1", "class 2")) +
scale_shape_discrete(name = "Class",
labels = c("class 1", "class 2"))
myPlot1
}
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Lab_Experiment",paste(file1_name,'.pdf', sep="")),bg="transparent")
myCCAPlot()
dev.off()
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Lab_Experiment",paste(file2_name,'.pdf', sep="")),bg="transparent")
myCCAPlot(V1, V2, U1, xyName = file2_name, coloName = file1_name)
dev.off()
dim(j1)
dim(microb)
microb=j1
rnaseq=j2
microb[,1:3]
microb <- microb[,-1]
microb <- as.matrix(apply(microb,2,as.numeric))
sd1 <- apply(microb,2,sd)
microb <- microb[,which(sd1 != 0)]  # choose only OTUs with non-zero standard deviation
rnaseq <- rnaseq[,-1]
rnaseq <- as.matrix(apply(rnaseq,2,as.numeric))
sd2 <- apply(rnaseq,2,sd)
rnaseq <- rnaseq[,which(sd2 != 0)]
library(PMA)
set.seed(1105)
ccaPerm_old = CCA.permute(x = microb, z = rnaseq,
typex = "standard", typez = "standard",
nperms = 30, niter = 5, standardize = T)
penXtemp = ccaPerm_old$bestpenaltyx
penZtemp = ccaPerm_old$bestpenaltyz
ccaRslt_old = CCA(x = microb, z = rnaseq,
typex = "standard", typez = "standard",
penaltyx = penXtemp, penaltyz = penZtemp,
K = 2, niter = 5, standardize = T)
sum(ccaRslt_old$u != 0)
sum(ccaRslt_old$v != 0)
ccaScoreU_old = microb %*% ccaRslt_old$u
ccaScoreV_old = rnaseq %*% ccaRslt_old$v
ccaScores_old = cbind(ccaScoreU_old, ccaScoreV_old)
colnames(ccaScores_old) = c("U1", "U2", "V1", "V2")
ccaScores_old = as.data.frame(ccaScores_old)
len = dim(microb)[1]
ccaScores_old$type = c(rep("class 1", len/2), rep("class 2", len/2))
library(ggplot2)
myCCAPlot = function(x = U1, y = U2, col = V1, shape = type, data = ccaScores_old,
xyName = file1_name, coloName = file2_name,
textVjust = -1.0, elliLev = 0.6, ...){
jitterPara = list(...)
if(!"height" %in% names(jitterPara)){
jitterPara = c(jitterPara, height = 0.01)
} else if(!"width" %in% names(jitterPara)){
jitterPara = c(jitterPara, width = 0.01)
}
x = deparse(substitute(x))
y = deparse(substitute(y))
col = deparse(substitute(col))
shape = deparse(substitute(shape))
myPlot1 = ggplot(data, aes(x = data[,x], y = data[,y],
col = data[,col], shape = data[,shape])) +
geom_point(size = 4) +
scale_color_continuous(name = paste0("First Component \nScores of ",
coloName),
low = "blue", high = "red") +
geom_text(aes(label = rownames(data)),
col = "black", size = 5, vjust = textVjust,
position = do.call("position_jitter", args = jitterPara)) +
## The position_jitter will make the values within a group
## a litter bit separate.
## On ther other hand, position_dodge will separate the values between groups.
scale_x_continuous(paste0("First Component Scores of ",
xyName)) +
scale_y_continuous(paste0("Second Component Scores of ",
xyName)) +
labs(title = paste0("Sparse CCA Scores for ", xyName, " as Base")) +
theme(legend.title = element_text(size = 12),
plot.title = element_text(size = 16, vjust = 2.0, face = "bold"),
legend.text = element_text(size = 10)) +
#stat_ellipse(aes(fill = data[,shape]), level = elliLev, alpha = 0.2,
#geom = "polygon", linetype = 2) +
scale_fill_discrete(name = "Class",
labels = c("class 1", "class 2")) +
scale_shape_discrete(name = "Class",
labels = c("class 1", "class 2"))
myPlot1
}
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Lab_Experiment",paste(file1_name,'.pdf', sep="")),bg="transparent")
myCCAPlot()
dev.off()
pdf(file.path("/home/ratanond/Desktop/Masters_Project/CCA/Lab_Experiment",paste(file2_name,'.pdf', sep="")),bg="transparent")
myCCAPlot(V1, V2, U1, xyName = file2_name, coloName = file1_name)
dev.off()
list(...)
...?
;
a = list(...)
HelloWorld <- function(...) {
arguments <- list(...)
paste(arguments)
}
HelloWorld("Hello", "World", "!")
HelloWorld("Hello", "World", "!",'hoho')
HelloWorld("Hello", "World", "!","hoho")
HelloWorld("Hello", "World", "!","hoho",'r')
list('a','sad','asd')
paste(list('a','sad','asd'))
